[quad_gantry_level]
gantry_corners:
	-60,-10
	410,420
points:
	50,25
	50,275
	300,275
	300,25
    
speed: 400
horizontal_move_z: 8
retries: 5
retry_tolerance: 0.0125
max_adjust: 30   ; wird mehr erforderlich, bricht Printer ab  

[gcode_macro START_PRINT]
description: Druckstart
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
variable_parameter_BED_TEMP: 0
variable_parameter_EXTRUDER_TEMP: 0
gcode:  
    {% if printer.extruder.target < 60 %}
        M140 S60        ; Bed heat up ( nowait )      
    {% endif %}   
                             
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %} 

    {action_respond_info("Switching off Filamentsensor at beginning of START_PRINT")}
    SET_FILAMENT_SENSOR SENSOR=fila_jam ENABLE=0 ; damit er zu Beginn nicht ausloest
    SET_FILAMENT_SENSOR SENSOR=fila_switch ENABLE=0 ; damit er zu Beginn nicht ausloest
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0   ; falls der Exhaustfan noch laufen sollte

    {% if printer.toolhead.homed_axes != "xyz" %}
        { action_respond_info("Heating extruder (wait) to 150 (current: %s)" %  printer.extruder.temperature ) }
        M109 S150                               ; Extruder auf Probetemperatur (wait)
        {action_respond_info("Homing...")}
        G28                                     ; Home        
    {% endif %}        

    {% if not printer.quad_gantry_level.applied  %}
        { action_respond_info("Heating extruder (wait) to 150 (current: %s)" %  printer.extruder.temperature ) }
        M109 S150                               ; Extruder auf Probetemperatur (wait)
        {action_respond_info("Quad gantry levelling...")}
        QUAD_GANTRY_LEVEL
    {% endif %}  

    {action_respond_info("Probing Z a last time")} 
    G28 Z

    {action_respond_info("Heating to clean nozzle...")}  
    M109 S180                           ; Nozzletemperatur nahe an den Oozingpunkt bringen
    {action_respond_info("Clean nozzle...")}                     
    CLEAN_NOZZLE  
    M109 S150  
                 
    M83                                 ; extruder relative mode
    STATUS_HEATING                      ; status leds zeigen Heizzustand
    G4 P500                             ; warte 500ms ???
    {action_respond_info("Heating bed (nowait) to %s" % BED_TEMP )}
    M140 S{BED_TEMP}                    ; Bed heat up ( nowait )
    
    #BED_MESH_PROFILE LOAD=default       ; Defaultprofil laden
    
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    
    # 40Grad in Filamentkonfig GCode Prusa; 25.10.22
    {% set CHAMBER = params.CHAMBER|default(40)|float %}    
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM=${CHAMBER} 
    { action_respond_info("Heating bed (wait) to %s" % BED_TEMP ) }
    M190 S{BED_TEMP}                    ; Bed heat up ( wait )  
    M109 S{EXTRUDER_TEMP}               ; extruder auf Zieltemperatur (wait)  
    G92 E0.0                            ; reset extruder length               
    G1 Z20 F3000                        ; move nozzle away from bed 
    G90                                 ; absolute positioning
    STATUS_PRINTING                     ; zeige print status in leds
    
    #_PRIME_LINE                        ; Extrudiere Primer vorne links   
    VORON_PURGE

    {action_respond_info("Reactivating filament runout sensor after 10s")}
    UPDATE_DELAYED_GCODE ID=activate_bttsensor DURATION=10 ; 10 Sekunden nach Printstart aktiviere BTT-Sensor wieder

[gcode_macro CONTINUE_PRINT]
description: Druck fortsetzen (Homing, Bed heating vorausgesetzt)
variable_parameter_BED_TEMP: 0
variable_parameter_EXTRUDER_TEMP: 0
gcode:  
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}       
    M83                                 ; extruder relative mode
    {action_respond_info("Heating bed (nowait) to %s" % BED_TEMP )}
    BED_MESH_PROFILE LOAD=default       ; Defaultprofil laden
    M109 S{EXTRUDER_TEMP}               ; extruder auf Zieltemperatur (wait)  
    G92 E0.0                            ; reset extruder length               
    #G1 Z20 F3000                        ; move nozzle away from bed 
    G90                                 ; absolute positioning
    STATUS_PRINTING                     ; zeige print status in leds

[gcode_macro HOMEZ]
description: possibility to home Z without X/Y movement AFTER homing XY
variable_skip_position_xy: 0            ; default value is skip off (normal homing in homing_override)
gcode:
    SET_GCODE_VARIABLE MACRO=HOMEZ VARIABLE=skip_position_xy VALUE=1
    G28                                 ; damit sollte mit G28 der code von homing_override OHNE xy-positioning laufen

[gcode_macro END_PRINT]
description: Druckende
gcode:
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.9             ; decontaminazation
    UPDATE_DELAYED_GCODE ID=exhaustfanloop DURATION=30  ; pruefe nach 30s, ob Temperatur niedrig genug	
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-18.0 F800                 ; retract filament (according to E3D 18mm)   
    G91                            ; relative positioning
    M107                           ; turn off fan (part  cooling fan)
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 70.0) %}
        {% set z_safe = 70.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}    
    G1 Z{z_safe} F3000             ; move nozzle up 70mm
    G90                            ; absolute positioning
    G0  X170 Y170 F3600            ; park nozzle in Middle (sagging gantry)
    NOZZLE_OFF                     ; Duesenbeleuchtung aus
    LOGO_OFF                       ; LED Logobeleuchtung aus
    M117 Print done     

[gcode_macro _PRIME_LINE]
gcode:
    G1 X5.0 Y5.0 F4500              ; nach vorne positionieren
    G0 Z0.3                         ; Drop to bed
    G92 E0                          ; Extrudierlaenge auf 0
    G1 Y120 E40 F800                ; extrudiere 40mm filament auf einer 12cm Linie
    G1 E-0.2 F3000                  ; rectract um stringing zu verhindern
    G92 E0                          ; Extrudierlaenge auf 0
    G1 Z5.0 F4500                   ; Kopf um z hoch  

#    Use unload_filament to unload ABS
[gcode_macro UNLOAD_FILAMENT]
gcode:
    NOZZLE_ON
    M109 S220                       ; nozzle auf 220Grad, wait
    M83
    G1 E-100 F300                   ; ziehe 100mm zurueck
    M82

#    Use load_filament to load ABS
[gcode_macro LOAD_FILAMENT]
gcode:
    NOZZLE_ON
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                         ; Home if not homed
    {% endif %}    
    {% set MILLIMETERS = params.MILLIMETERS|default(100)|float %}    
    G90                             ; absolute positioning
    G0 X130 Y355 F3600              ; oozing position (lasse Druckkopf auf Hoehe z) 
    #M109 S220                       ; nozzle auf 220Grad, wait
    M83
    G1 E{MILLIMETERS} F300          ; extrudiere MILLIMETERS Millimiter
    G1 E-2 F800                     ; 2mm zurueckziehen, um Oozing zu vermeiden
    M82    

[gcode_macro LOAD_FILAMENT_DELAYED]
gcode:
    LOAD_FILAMENT MILLIMETERS=90


[pause_resume]

[gcode_macro CANCEL_PRINT]
description: Den aktuellen Druck abbrechen
rename_existing: CANCEL_PRINT_BASE
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE :: !! SDCARD_RESET_FILE cannot be run from the sdcard
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 70.0) %}
        {% set z_safe = 70.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}    
    G91                            ; relative positioning
    G1 Z{z_safe} F3000             ; move nozzle up 70mm
    G90                            ; absolute positioning
    G0  X170 Y170 F3600            ; park nozzle in Middle (sagging gantry)
    NOZZLE_OFF                     ; Duesenbeleuchtung aus
    LOGO_OFF                       ; LED Logobeleuchtung aus
    M117 Print done

[gcode_macro PAUSE]
description: Den aktuellen Druck pausieren
rename_existing: PAUSE_BASE
gcode:
    #Parameters
    {% set z = params.Z|default(20)|int %}                      ; Ellis: z-hop
    {% set x_park = 130|float %}                                ; park pos x,y: default is your oozing position over bucket
    {% set y_park = printer.toolhead.axis_maximum.y|float %}

    {% if printer['pause_resume'].is_paused|int == 0 %}

        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; Ellis: set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; Ellis: set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=fila_jam  ENABLE=0        ; Ellis: disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                          ; Ellis
        PAUSE_BASE   

        {% if printer.extruder.can_extrude|lower == 'true' %}
            G1 E-1 F2100                                     ; retract to clear lgx lite
        {% else %}
            {action_respond_info("Extruder not hot enough to rectract")}
        {% endif %}

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}   ; Ellis: check that zhop doesn't exceed z max
            G91                                                                          ; Ellis: relative positioning
            G1 Z{z} F900                                                                 ; Ellis: raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }              ; Ellis: if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}

        {% if "xyz" in printer.toolhead.homed_axes %}
            G90                           ; absolute positioning
            G1 X{x_park} Y{y_park} F6000  ; part the tool head above oozing station
        {% else %}
            {action_respond_info("Printer not homed")}
        {% endif %} 

        SAVE_GCODE_STATE NAME=PAUSEPARK ; Ellis: save state
        M104 S0                         ; Ellis: cool down hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200  ; Ellis: 12h
    {% endif %}

[gcode_macro RESUME]
description: Den aktuellen Druck fortsetzen
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
gcode:
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=fila_jam ENABLE=1                                 ; Ellis: enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; Ellis: set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; Ellis: wait for hotend to heat back up
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100   ; Ellis: go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                        ; relative positioning
        M83                                                        ; relative extruder positioning
     
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E2 F900                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                   ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60        ; Ellis: restore position 
        RESUME_BASE                                                ; Ellis: resume
    {% endif %}

[gcode_macro _MACROTEST]
description: Hier code zum testen einfuegen
gcode:
    M117 So ein murks
    {action_respond_info("Filament change or resume aa")}

[gcode_macro BTTOFF]
description: Den Filamentsensor abschalten
gcode:
    M117 FilamentSensor_Off
    SET_FILAMENT_SENSOR SENSOR=fila_jam ENABLE=0
    {action_respond_info("Turning off filamentsensor")}

[gcode_macro LIFTMIDDLE]
description: lift up to 70mm if possible and assume parking pos in middle of bed
gcode:
     G91                            ; relative positioning
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 70.0) %}
        {% set z_safe = 70.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}    
    G1 Z{z_safe} F3000             ; move nozzle up 50mm
    G90                            ; absolute positioning
    G0  X170 Y170 F3600            ; park nozzle in Middle (sagging gantry)

[gcode_macro MOVEMIDDLE]
description: Parking pos in middle of bed
gcode:
    G90                            ; absolute positioning
    G0  X170 Y170 F3600            ; park nozzle in Middle (sagging gantry)    

[gcode_macro INPUTSHAPERTEST]
description: Test ADXL sensor
gcode:
     ACCELEROMETER_QUERY  
     MEASURE_AXES_NOISE   

[gcode_macro INPUTSHAPER_X]
description: Erzeugt unter /tmp/ eine Resonsanz-.csv
gcode:
     TEST_RESONANCES AXIS=X      

[gcode_macro INPUTSHAPER_Y]
description: Erzeugt unter /tmp/ eine Resonsanz-.csv
gcode:
     TEST_RESONANCES AXIS=Y 

[gcode_macro SAFEZ_AND_REBOOT]
description: Safe current offset and make it permanent
gcode:
     Z_OFFSET_APPLY_ENDSTOP
     SAVE_CONFIG

################ Monitoring loops #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode exhaustfanloop]
gcode:
	{% if printer.heater_bed.temperature|int >= 30 %}
		UPDATE_DELAYED_GCODE ID=exhaustfanloop DURATION=30  ; If temp not reached yet: loop again
	{% else %}
		SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0             ; fan off
	{% endif %}

[delayed_gcode activate_bttsensor]
gcode:
    {action_respond_info("Turning on filamentsensor")}
    SET_FILAMENT_SENSOR SENSOR=fila_jam ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=fila_switch ENABLE=1

[bed_mesh]
speed: 400
horizontal_move_z: 10
#mesh_min: 17, 10
mesh_min: 0, 0
mesh_max: 345, 345
probe_count: 7, 7 
fade_start: 0.6
fade_end: 10.0
#relative_reference_index: 12 ; fuer TAP nicht notwendig
algorithm: bicubic