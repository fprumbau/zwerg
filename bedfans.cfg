# Here the various fans and the chamber temperature is controlled.
#  
# Preheating
# 
# This can be done with the macro HeatChamberStart. It will set bed temperature to 
# 105°C and let the bed fans speed up to a rather noisy 70%, while printing this will be 
# lowered to 60%. It should not be changed while printing, so the bed won't warp!!!
# If things get too hot, rather activate the exhaust fan, see blow
#
# Printing
# 
# When printing is started the macro SET_HEATER_TEMPERATURE is called. It will lower
# bed fan speed to 20% (variable_slow) if bed temperature is lower than target-1°C.
# While printing a monitoring loop is started  (macro bedfanloop), which is recalled
# every 30s.First it will set the bed fan speed to 60% (variable_high), if the temperature
# is higher than target-1°C. 
# Second it will start the exhaust fan with 50% (exhaust_fan_level), if the print head's 
# temperature exceeds 80°C ( variable_max_printhead_level )
#
############### Config options ##################

[gcode_macro bedfanvars]
variable_threshold: 80		    ; If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_chambertarget: 60 	    ; If target is reached, ...
variable_max_printhead_temp: 75 ; If this temperature is reached, the exhaust fan will start on low
variable_fast: 0.6			    ; Fan speed once target temp is reached  
variable_slow: 0.2			    ; Fan speed on heating up the bed (get printing faster)
variable_exhaust_fan_level: 0.5 ; Fan speed of exhaust fan, when printhead is too hot
gcode:

########## Bed Fans #########

[fan_generic BedFans]
pin: PB3
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro HeatChamberStart]
description:
gcode:	
	{action_respond_info("Setting bed target to 105 and starting monitoring loop")}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=105
	SET_FAN_SPEED FAN=BedFans SPEED=0.7
	M104 S150 ; heizt durch Partfan 

[gcode_macro HeatChamberStop]
description:
gcode:		
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
	SET_FAN_SPEED FAN=BedFans SPEED=0

[gcode_macro BedFansSlow]
description:
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BedFansFast]
description:
gcode:
	# Vars
	{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BedFansOff]
description:
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}

	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if bed temperature hasn't been reached (get to print faster)
	{% if HEATER|lower == "heater_bed" %}
		{% if printer.heater_bed.temperature|int <= (printer.heater_bed.target|int - 1) %}
			BedFansSlow
			{action_respond_info("Lowered bed fan speed be able to print faster")}		
		{% endif %}
	{% endif %}

    # start monitoring loop
	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=30
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}                                      

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}		# Wait for bed temp within 5 degrees
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BedFansOff
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################
#
# Turns bed fans to "fast" speed once target bed temp is reached,
# control max printhead temperature
[delayed_gcode bedfanloop]
gcode:
	#{action_respond_info("Fan monitoring loop still running...")}

	# Vars
	{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
	{% set MAX_HEAD_TEMP = printer["gcode_macro bedfanvars"].max_printhead_temp|int %}
	{% set EXHAUST_FAN_LEVEL = printer["gcode_macro bedfanvars"].exhaust_fan_level|float %}
		
	{% if printer.heater_bed.target >= THRESHOLD %}	  # only makes sense if bed target is hotter than i.e. 80°C
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BedFansFast								  # If within 1 degree of target temp: Higher speed fans
		{% endif %}
	{% endif %}

	{% if printer.printhead.temperature|int >= MAX_HEAD_TEMP %}
			SET_FAN_SPEED FAN=exhaust_fan SPEED=EXHAUST_FAN_LEVEL # start exhaust fan if too hot
    {% else %}
			SET_FAN_SPEED FAN=exhaust_fan SPEED=0	# else stop exhaust fan
	{% endif %}	

	{% if printer.heater_bed.temperature|int <= 40 %}
		{action_respond_info("Terminating bedfan loop, stopping exhaust fan, print finished :-) ...")}
		SET_FAN_SPEED FAN=exhaust_fan SPEED=0
		UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0
	{% else %}
		UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=30	
	{% endif %}							
